# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu/vivid64"
  
  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  #config.vm.box_url = ""

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine.
  config.vm.hostname = "dev"
  #config.vm.network :forwarded_port, guest: 7001, host: 7001, auto_correct: true

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder.
  # config.vm.synced_folder "../data", "/vagrant_data"

  config.vm.provider :virtualbox do |vb|
     # Don't boot with headless mode
     vb.gui = true
	 
	 cpus = 4
	 mem = "4096"
  
	vb.customize ["modifyvm", :id, "--memory", mem]
	vb.customize ["modifyvm", :id, "--cpus", cpus]
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  #config.vm.provision "shell", path: "install-dev-environment.sh"
  config.vm.provision "shell", path: "install-xfce4.sh"
  #config.vm.provision "shell", path: "install-gnome.sh"
  #config.vm.provision "shell", path: "install-dev-tools.sh"
  #config.vm.provision "shell", path: "eclipse-features.sh"

  #config.vm.provision "shell", inline: <<-SHELL
  #  
  #  
  #SHELL
  
end
